- content_for :header_css do
  :plain
    .href_equiv_path{max-width: 232px; overflow: hidden; word-wrap: anywhere;}

- content_for :ujs do
  <script src="//cdn.ckeditor.com/4.20.1/standard/ckeditor.js"></script>
  = javascript_include_tag 'entry_form', :media => 'all'


-#
-# The entry_path could be changed by our entry_path helper override if it's Tag is a 'context URL', so
-# instead of:
-#   /entries/165-my-great-post
-# you might get
-#   /blog/165-my-great-post
-# but since we do not config a PUT/POST/PATCH route for the 'context_url' it will fail. Since this is the only
-# point in the application that we should be PUT/POST/PATCH of the Entry we choose to fix the URL
-# 
= form_for @entry, :url => "/semi-static/entries/#{@entry.id}", :class => 'form-inline' do |f|
  - if @entry.errors.any?
    .row
      .col-md-12
        .tile
          #error_explanation
            %h2= "#{pluralize(@entry.errors.count, "error")} prohibited this entry from being saved:"
            %ul
              - @entry.errors.full_messages.each do |msg|
                %li= msg

  = hidden_field_tag 'newsletter_id', @newsletter.id if @newsletter
  = hidden_field_tag 'entry[simple_text]', @entry.simple_text

  .row
    .col-md-8
      .tile
        .tile-title
          %h5
            %span.app-menu__icon.fa.fa-website.invert
            %span Main Content

        .tile-body
          .infobox#word_break_entry_title
            %h5= 'Long words in titles'
            %p
              = 'If your title contains long words, then you should specify the word break point so that it does'
              = 'not overflow on mobile devices and generally behaves well when the screen (viewport) is resized. You'
              = 'can suggest word break points by including the'
              %b= '<wbr/>'
              = 'tag.'
            %p
              = 'For example you could set the break point for \'Nottinghamshire\' to \'Notting-ham-shire\'by entering the following into'
              = 'the title field:'
            %p
              = 'Notting<wbr/>ham<wbr/>shire'
            %p
              = 'You can also use the'
              %b= '&shy;'
              = ' entity to allow word break but hyphenate, eg:'
            %p
              = 'Notting&shy;ham&shy;shire'
          .input-group
            .infomarker{:data => {:marker => 'word_break_entry_title'}}
            .input-group-prepend
              = f.label :title, :class => 'input-group-text'
            = f.text_field :title, :class => 'form-control mt-2'
          .input-group
            .input-group-prepend
              = f.label :sub_title, :class => 'input-group-text'
            = f.text_field :sub_title, :class => 'form-control mt-2'
          - unless @newsletter
            .semi_static_youtube_id_str.sScontentSection
              .alert.alert-info.helpbox.mt-2#youtube_id_str_text_box
                %h5= 'YouTube ID'
                %p
                  = 'If a YouTube video ID is given, then the video will be presented before the entry text and image'
                %p
                  = 'If you are not sure what the YouTube ID is, then click on "share" underneath the YouTube video, and then copy the'
                  = 'URL link to the field below.'
                %p
                  = 'By default your video will be shown in 640px (wide) x 360px (high). If you want to set the width and height'
                  = 'yourself then you can provide the dimensions seperated by commas. For example a youtube video with'
                  = 'id = abc123xyz, width = 400px, height = 300px, you should enter:'
                  %b= ' abc123xyz,400,300'
                %p
                  = 'Note: The dimensions given in the string can be overwritten by providing the page attributes youTubeVideoWidth and'
                  = 'youTubeVideoHeight'
        
              .input-group
                .infomarker{:data => {:marker => 'youtube_id_str_text_box'}}
                .input-group-prepend
                  = f.label :youtube_id_str, 'YouTube Video ID (optional)', :class => 'input-group-text'
                = f.text_field :youtube_id_str, :class => 'form-control mt-2'
                %span#validateYoutubeButton{:style => 'display: none'}
                  = link_to 'Click here to validate YouTube ID', '#', onclick: 'validate_youtube_id(); return false'

          .row.mt-2.sScontentSection
            .col-md-12
              .alert.alert-dismissible.alert-info.helpbox.mt-1#partial_description
                = '<button class="close" type="button" data-dismiss="alert">Ã—</button>'.html_safe
                #partial_description_text
                  = render :partial => 'semi_static/system/partial_description', :object => @entry
            .input-group.col-md-8
              .input-group-prepend
                %span.infomarker{:data => {:marker => :partial_description}}
                %span.input-group-text Custom view
              = f.select :partial, options_for_select(SemiStatic::Engine.config.open_partials.collect{|k, v| [k, k]}.prepend(["- None -", 'none']), @entry.partial), {}, {:class => 'form-control'}
            .input-group.col-md-4#entry_position_select
              .input-group-prepend
                %span.input-group-text{:title => 'Position of Entry in custom view'} Entry position
              = f.select :entry_position, options_for_select(SemiStatic::Entry::DISPLAY_ENTRY_SYM, @entry.entry_position), {}, { :class => 'form-control'}
  
          #semi-static-entry-body.sScontentSection
            .form-group.mt-3
              = f.label :body, :class => 'font-weight-bold'
              = link_to '#', id: 'enable_editor', class: 'float-right btn btn-sm btn-primary' do
                Editor
              = link_to '#', id: 'convert_and_enable_editor', class: 'mr-2 float-right btn btn-sm btn-warning' do
                Convert to editor
              - unless @entry.new_record?
                = link_to edit_entry_path(@entry, :view => :edit_html), :title => 'Edits will be lost', :remote => true, :class => 'mr-2 float-right btn btn-sm btn-warning' do
                  %span HTML Mode
            .form-group.clearfix
              #entry_text_area
                = f.text_area :body, :rows => 40, :class => 'form-control'
              .infobox#unrestricted_html_check_box
                %h4= 'Unrestricted HTML'
                %p
                  = 'This best left un-checked if you are not sure what you are doing. If you check this'
                  = 'box then certain HTML will be allowed and you will have more flexibilty e.g. you will be allowed to embbed YouTube videos'
              %span.infomarker{:data => {:marker => :unrestricted_html_check_box}}
              = f.check_box :unrestricted_html
              = f.label :unrestricted_html
              - if @entry.raw_html
                .infobox#raw_html_check_box
                  %h4= 'Raw HTML'
                  %p
                    = 'Indicates that this entry has been previously saved in raw mode. If you untick this box then there is a risk that'
                    = 'certain HTML tags and attributes will be removed and your entry will not display as before.'
                %span.infomarker{:data => {:marker => :raw_html_check_box}}
                = f.check_box :raw_html
                = f.label :raw_html
          .form-group.mt-2
            = f.label :summary, :class => 'font-weight-bold'
            .infobox#summary_box
              %h5= 'Summary length'
              %p
                Set length to the number of characters you want the maximum size of the summary to be. If you do not
                provide text in the
                %em= 'Summary box'
                then the main body will be truncated as best as possible and the actual number of characters may be
                less than the value given in the
                %em= 'summary length.'
              %p
                The
                %em= 'summary length.'
                has some special values. The value of 0 means that no summary at all will be displayed, only the header and optionally the image.
                A negative value has the same effect as a 0 value, but there header will not even have a link to the actual entry. This is
                useful for displaying Twitter-like message in the news columns. Leaving the summary size blank means that even actual header
                text will not be displayed.
            .float-right
              .input-group
                %span.infomarker{:data => {:marker => :summary_box}}
                .input-group-prepend
                  .input-group-text.mb-2 Optimal summary length
                = f.text_field :summary_length, :class => 'form-control mb-2'
            = f.text_area :summary, :rows => '5', :class => 'form-control'
            = f.check_box :use_as_news_summary
            = f.label :use_as_news_summary
        
          #semi_static_entry_image.sScontentSection
            %h5= 'Image'
            - if @entry.img.present?
              = image_tag(@entry.img.url(:panel), :title => @entry.title, :alt => 'Entry Image', :class => 'img-fluid', :id => 'semi_static_image_for_upload')
            - else
              = image_tag('no-image-loaded.jpg', :title => 'Placeholder', :class => 'img-fluid', :id => 'semi_static_image_for_upload')
            #semi_static_entry_image_control
              = f.check_box :image_disable
              = f.label :image_disable, 'Disable display of image and caption in entry'
              .infobox#popup_control
                %h5= 'Popup'
                %p
                  = 'You can often click on the entry image to get to the final entry view. If this is'
                  = 'checked then the final entry will be clickable and the following will happen:'
                %p
                  = 'The system will do a high speed AJAX request to load a high definition'
                  = 'copy of the image into a popup window. The size of this window will potentially be up to'
                  = '50% of the width and height (25% of the area) of the origional image that you loaded. You'
                  = 'must therefore be careful to load reasonalbly sizes images, ie. no 20Mbyte 10000px wide'
                  = 'images from high defination cameras, unless you scale them before loading to the system'
                %p
                  = 'If the system detects that you hage a high definition (high DPI, double density or retina)'
                  = 'screen, then the system will load a highly compressed image into the pop up and set it to'
                  = 'display in double density. This is a very efficient and very effective way of showing high'
                  = 'resolution images'
    
              %span.infomarker{:data => {:marker => :popup_control}}
              = f.check_box :image_popup
              = f.label :image_popup, 'Allow possible image pop up in the final entry'
            .infobox#loaded_image
              %h5 Currently loaded image
              - if @entry.img.present?
                The currently loaded mage is:
                %ul
                  %li= @entry.img_file_name
                  %li= 'Type: ' + (@entry.img_content_type || '<unknown>')
                  - unless @entry.img_dimensions.blank?
                    %li= @entry.img_dimensions[0].to_s + 'px x ' + @entry.img_dimensions[1].to_s + 'px'
                  %li= link_to @entry.img.url, @entry.img.url
                %h5= 'Other versions:'
                %ul
                  - Paperclip::AttachmentRegistry.definitions_for(SemiStatic::Entry)[:img][:styles].keys.each do |s|
                    %li= link_to @entry.img.url(s), @entry.img.url(s)
                = f.label :img_delete, 'Tick to delete this image on save'
                = f.check_box :img_delete
              - else
                %p
                  No image is currently loaded
          .input-group.sScontentSection
            %span.infomarker{:data => {:marker => :loaded_image}}
            .input-group-prepend
              = f.label :img, 'Image', :class => 'input-group-text'
            = f.file_field :img, :class => 'form-control mt-2'
          .input-group.sScontentSection
            .input-group-prepend
              = f.label :image_caption, 'Image caption', :class => 'input-group-text'
            = f.text_area :image_caption, :rows => 2, :class => 'form-control mt-2'
          .form-group.mt-4.sScontentSection
            %h5= 'Document'
            .infobox#loaded_document
              %h5 Currently loaded document
              - if @entry.doc.present?
                The currently loaded document is:
                %ul
                  %li= @entry.doc_file_name
                  %li= @entry.doc_content_type
                = f.label :doc_delete, 'Tick to delete this document on save'
                = f.check_box :doc_delete
              - else
                No document is currently loaded
            .input-group
              %span.infomarker{:data => {:marker => :loaded_document}}
              .input-group-prepend{:title => 'Add optional document'}
                = f.label :doc, 'Document', :class => 'input-group-text'
              = f.file_field :doc, :class => 'form-control mt-2'
            .input-group{:title => 'Document description'}
              .input-group-prepend
                = f.label :doc_description, 'Description', :class => 'input-group-text'
              = f.text_area :doc_description, :rows => 3, :class => 'form-control mt-2'
            .infobox#show_in_documents_tag
              %h4= 'Show in documents tag'
              %p
                If you have a tag the uses the predefined 
                %em= 'Documents'
                tag then if this box is checked then the document will be listed for downlown in the
                %em= 'Documents'
                tag.
            %span.infomarker{:data => {:market => :show__documents_in_tag}}
            = f.check_box :show_in_documents_tag
            = f.label :show_in_documents_tag, 'Show in document tag'
    
      .tile.sScontentSection
        .tile-title
          %h5= 'Style & header'
        .tile-body
          .row
            .col-md-8
              .stacked-input-group
                = f.label :style, 'Custom style rules (CSS)', :class => 'input-group-text'
                = f.text_area :style, :rows => 8, :class => 'form-control'
              .stacked-input-group#headerHTML
                = f.label :style, 'Header HTML', :class => 'input-group-text'
                = f.text_area :header_html, :rows => 6, :class => 'form-control'
            .col-md-4
              = labeled_selectbox(f, :style_class, options_for_select(SemiStatic::EntriesHelper::STYLE_CLASSES.collect{|sc| [sc, sc]}, @entry.style_class))
              .stacked-input-group{:title => 'Background CSS colors: black, yellow, #5f78c0, etc'}
                = f.label :background_colour, 'Background color', :class => 'input-group-text'
                = f.text_field :background_colour, :size => 10, :class => 'form-control'
              .stacked-input-group{:title => 'Header CSS colors: black, yellow, #5f78c0, etc'}
                = f.label :header_colour, 'Header color', :class => 'input-group-text'
                = f.text_field :header_colour, :size => 10, :class => 'form-control'
              .stacked-input-group{:title => 'Text CSS colors: black, yellow, #5f78c0, etc'}
                = f.label :colour, 'Text color', :class => 'input-group-text'
                = f.text_field :colour, :size => 1, :class => 'form-control'

      - unless @entry.new_record?
        .tile
          .tile-body
            .tile-title-w-btn
              %h5
                %span.app-menu__icon.fa.fa-attrs.invert
                Attributes
              = link_to new_entry_page_attr_path(@entry), :class => 'btn btn-sm btn-primary', :remote => true do
                %span New attribute
          - if @entry.page_attrs.present?
            %table.table.sortable.table-bordered.table-hover
              %thead
                %tr
                  %th='Key'
                  %th='Value'
                  %th
                    %i.app-menu__icon.fa.fa-delete
              %tbody
                - @entry.page_attrs.each do |a|
                  %tr
                    %td= link_to a.attr_key, edit_polymorphic_path([@entry, a]), :remote => :true
                    %td= a.attr_value
                    %td
                      = link_to entry_page_attr_path(@entry, a), :method => :delete do
                        %i.app-menu__icon.fa.fa-delete


    .col-md-4
      .tile
        %h5 Position
        #semiStaticPosition.input-group
          .input-group-prepend
            %span.input-group-text Position
          = f.text_field :position, :class => 'form-control'
        .sScontentSection
          = labeled_textfield(f, :merge_to_id, 'Merge to Entry ID')

      .tile
        %h5 Menu &amp; Tag selection
        .input-group
          .input-group-prepend
            .input-group-text Tag
          - if @newsletter
            = f.select :tag_id, options_for_select(SemiStatic::Tag.unscoped.collect{|t| [[t.locale, ': ', t.name].join, t.id]}, @entry.tag_id), {}, {:class => 'form-control'}
          - else
            = f.select :tag_id, options_for_select(SemiStatic::Tag.all.collect{|t| [[t.locale, ': ', t.name].join, t.id]}, @entry.tag_id), {}, {:class => 'form-control'}
        .input-group.mb-2
          .infobox#link_to_tag_info
            %h5= 'Link to Tag'
            %p
              = 'If you have checked this box then this entry will possibly be used as the content for'
              = 'its Tag rather than the standard Tag index. This may not work as you expect if you'
              = 'have more than one Entry in the same Tag with link_to_tag set.'
          = labeled_checkbox(f, :link_to_tag, nil, :link_to_tag_info)
        .input-group
          .infobox#alt_title
            %h4= 'Alternative title'
            %p
              = 'This can be used as an alternative title for the entry. For example, if you want the'
              = 'menu description for this entry to be different to the actual entry title then put'
              = 'the desired menu description text in here.'
        .input-group
          %span.infomarker{:data => {:marker => 'alt_title'}}
          .input-group-prepend
            %span.input-group-text Alt. title
          = f.text_field :alt_title, :class => 'form-control'
        .input-group
          .infobox#acts_as_tag_info
            %h5= 'Acts as Tag'
            %p
              = 'If set, then none of the other fields in this form have any effect as this entry will simply'
              = 'redirect to the tag specified. This can be useful for building menus with many'
              = 'levels of hierarchy'
          = labeled_selectbox(f, :acts_as_tag_id, options_for_select(SemiStatic::Tag.unscoped.collect{|t| [[t.id, t.locale.upcase, t.name].join(': '), t.id]}.prepend(["- None -", nil]), @entry.acts_as_tag_id), nil, :acts_as_tag_info)
      .tile.sScontentSection
        %h5 Banner
        #selected_banner.banner-thumb
          - if @entry.banner.present?
            = render :partial => 'semi_static/banners/show', :locals => {:banner => @entry.banner}
        .input-group
          .input-group-prepend
            = f.label :banner_id, :class => 'input-group-text'
          = f.select :banner_id, options_for_select(SemiStatic::Banner.all.collect{|b| [b.name, b.id]}.prepend(["- None -", 'none']), @entry.banner_id), {}, {:class => 'form-control mt-2'}
        .input-group#tag_line_override{:style => 'display: none'}
          .input-group-prepend
            = f.label :tag_line, 'Tag line override', :class => 'input-group-text'
          = f.text_field :tag_line, :class => 'form-control mt-2'
      - unless @newsletter
        .tile.sScontentSection
          %h5 Home page and News sidebar
          = labeled_checkbox(f, :home_page)
          = labeled_checkbox(f, :news_item)
          = labeled_checkbox(f, :image_in_news)
          .infobox#alternate_image
            %h5= 'Alternate image'
            %p
              = 'By default this image will be used for a news column summary instead of the main entry'
              = 'image. It may also be used in other ways, like as an image for a Newsletter or as an'
              = 'icon for a custom entry'
            %h5 Currently loaded image
            - if @entry.news_img.present?
              The currently loaded mage is:
              %ul
                %li= @entry.news_img_file_name
                %li= 'Type: ' + (@entry.news_img_content_type || '<unknown>')
                %li= link_to @entry.news_img.url, @entry.news_img.url
              = f.label :alt_img_delete, 'Tick to delete this image on save'
              = f.check_box :alt_img_delete
            - else
              No image is currently loaded
          .stacked-input-group
            %span.infomarker{:data => {:marker => :alternate_image}}
            = f.label :news_img, 'Alternative image', :class => 'input-group-text'
            = f.file_field :news_img, :class => 'form-control'
      .tile.sScontentSection
        %h5 Blog functions
        = labeled_checkbox(f, :enable_comments)
        #comment_strategy
          = labeled_selectbox(f, :comment_strategy, options_for_select(SemiStatic::Entry::COMMENT_STRATEGY.collect{|k,v| [k.to_s.humanize, v]}, @entry.comment_strategy), 'Comment procedure')
      .tile.sScontentSection
        %h5 Language
        = labeled_selectbox(f, :locale, options_for_select(I18n.available_locales.collect{|l| [l, l]}, @entry.locale))
      - unless @newsletter
        .tile.sScontentSection
          %h5 Sidebar configuration
          = labeled_checkbox(f, :side_bar)
          #side_bar_options
            .input-group
              .input-group-prepend
                = f.label :sidebar_id, 'Content', :class => 'input-group-text'
              = f.select :sidebar_id, options_for_select(SemiStatic::Sidebar.all.collect{|s| [s.title.blank? ? "##{s.id.to_s}" : s.title, s.id]}.prepend(["- None -", nil]), @entry.sidebar_id), {}, {:class => 'form-control mt-2'}
            .input-group
            = labeled_checkbox(f, :side_bar_news, 'News')
            = labeled_checkbox(f, :side_bar_social, 'Social links')
            = labeled_checkbox(f, :side_bar_search, 'Search')
            .input-group
              .input-group-prepend
                = f.label :side_bar_tag_id, 'Tag for sidebar', :class => 'input-group-text'
              = f.select :side_bar_tag_id, options_for_select(SemiStatic::Tag.locale(@entry.locale).collect{|t| [t.name, t.id]}.prepend(["- None -", nil]), @entry.side_bar_tag_id), {}, {:class => 'form-control mt-2'}
            .input-group
              .input-group-prepend
                = f.label :side_bar_gallery, 'Number of gallery images to show', :class => 'input-group-text'
              = f.text_field :side_bar_gallery, :size => 10, :class => 'form-control mt-2'
      .tile.sScontentSection
        %h5
          Gallery Images
        = labeled_selectbox(f, :gallery_id, options_for_select(SemiStatic::Gallery.locale(@entry.locale).collect{|g| [g.title, g.id]}.prepend(["- None -", nil]), @entry.gallery_id), 'Gallery')
        .infobox#main_entry_titles
          %h5 Main Entry titles
          %p
            = 'Show the titles along with photos that are displayed in the Entry'
        = labeled_checkbox(f, :show_image_titles, 'Main Entry titles', :main_entry_titles)
      .tile.sScontentSection
        %h5 Social share buttons
        .row
          .col-md-6
            = labeled_checkbox(f, :facebook_share, 'Facebook')
            = labeled_checkbox(f, :linkedin_share, 'LinkedIn')
            = labeled_checkbox(f, :xing_share, 'Xing')
          .col-md-6
            = labeled_checkbox(f, :instagram_share, 'Instagram')
            = labeled_checkbox(f, :twitter_share, 'Twitter')
            = labeled_checkbox(f, :email_share, 'Email')
      .tile.sScontentSection
        %h5 Event
        = labeled_selectbox(f, :event_id, options_for_select(SemiStatic::Event.all.collect{|e| [['ID ', e.id.to_s, ': ', e.name].join, e.id]}.prepend(["- None -", 'none']), @entry.event_id), 'Event')

      .tile.sScontentSection
        %h5 Squeeze
        = labeled_selectbox(f, :squeeze_id, options_for_select(SemiStatic::Squeeze.all.collect{|s| [['ID ', s.id.to_s, ': ', s.name].join, s.id]}.prepend(["- None -", 'none']), @entry.squeeze_id), 'Squeeze')
      .tile.sScontentSection
        %h5 Job Posting
        = labeled_selectbox(f, :job_posting_id, options_for_select(SemiStatic::JobPosting.all.collect{|s| [['ID ', s.id.to_s, ': ', s.title].join, s.id]}.prepend(["- None -", 'none']), @entry.job_posting_id))

          
      .tile.sScontentSection
        %h5 Newsletter
        .infobox#newsletter_img
          %h4= 'Newsletter image (optional)'
          - if @entry.newsletter_img.present?
            = image_tag(@entry.newsletter_img(:crop))
          %p
            = 'If you add a image here it will be used inside any newletter generated with this entry'
        .stacked-input-group
          %span.infomarker{:data => {:marker => :newsletter_img}}
          = f.label :newsletter_img, 'Image for newsletter', :class => 'input-group-text'
          = f.file_field :newsletter_img, :class => 'form-control'

  .row
    .col-md-12
      .tile
        .tile-body
          = f.submit 'Save', :class => 'btn btn-danger btn-block'
