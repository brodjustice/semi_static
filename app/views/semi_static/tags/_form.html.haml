- content_for :ujs do
  :javascript
    function load_banner_preview(b_id){
        $.ajax({
          url: "/banners/" + b_id,
          dataType: 'script'
        });

    };
    function check_menu(){
      if($('#tag_menu').prop('checked')) {
        $('#target_options').show();
      } else {
        $('#target_options').hide();
      }
    }
    function check_side_bar(){
      if($('#tag_side_bar').prop('checked')) {
        $('#side_bar_options').show();
      } else {
        $('#side_bar_options').hide();
      }
    }
    function check_tag_line(){
      if($('#tag_banner_id').val() == 'none') {
        $('#tag_line_override').hide();
      } else {
        $('#tag_line_override').show();
      }
    }


    $(document).ready(function() {
      $( "#tag_banner_id" ).change(function() {
        check_tag_line();
        load_banner_preview($('#tag_banner_id').val());
      });

      check_menu();
      $("#tag_menu" ).change(function() {
        check_menu();
      });

      check_tag_line();
      if ($('#tag_partial').val() == 'none'){
        $('#entry_position_select').hide();
      }
      $('#tag_partial').change(function() {
        var params = {'cmd':{'partial_description': $('#tag_partial').val()}}
        $.ajax({url: "#{system_path()}", data: params, type: 'PUT', dataType: 'script'});
        if($('#tag_partial').val() == 'none') {
          $('#entry_position_select').hide();
        } else {
          $('#entry_position_select').show();
        }
      });
    });

= form_for @tag do |f|
  .group
    .col.span_2_of_3
      - if @tag.errors.any?
        #error_explanation
          %h2= "#{pluralize(@tag.errors.count, "error")} prohibited this tag from being saved:"
          %ul
            - @tag.errors.full_messages.each do |msg|
              %li= msg
      %h2 Main Content
      %fieldset
        = f.label :name
        %br/
        = f.text_field :name
        %br/
        - if SemiStatic::Engine.config.try('subscribers_model')
          = f.check_box :subscriber
          = f.label :subscriber, 'Subscriber only content'
          %br/
        = f.check_box :admin_only
        = f.label :admin_only, 'Admin only content (draft content not public)'
      %fieldset
        = f.label :sidebar_title
        %br/
        = f.text_field :sidebar_title
      %fieldset
        #selected_banner
          - if @tag.banner.present?
            = render :partial => 'semi_static/banners/show', :locals => {:banner => @tag.banner}
        = f.label :banner
        = f.select :banner_id, options_for_select(SemiStatic::Banner.all.collect{|b| [b.name, b.id]}.prepend(["- None -", 'none']), @tag.banner_id)
        #tag_line_override{:style => 'display: none'}
          = f.label :tag_line, 'Tag line override (optional)'
          %br/
          = f.text_field :tag_line
    
    
      %fieldset
        .infobox.wide#partial_description
          = render :partial => 'semi_static/system/partial_description', :object => @tag
        %span.infomarker
        = f.label :partial, 'Custom view'
        = f.select :partial, options_for_select(SemiStatic::Engine.config.open_partials.collect{|k, v| [k, k]}.prepend(["- None -", 'none']), @tag.partial)
        %span#entry_position_select
          = f.label :entry_position
          = f.select :entry_position, options_for_select(SemiStatic::Entry::DISPLAY_ENTRY_SYM, @tag.entry_position)
    
      %fieldset.section.group
        .col.span_1_of_2
          - if @tag.icon.present?
            .img_field
              = image_tag(@tag.icon.url(:big))
          = f.label :icon
          = f.file_field :icon
          %br/
          %br/
          = f.label :locale
          %br/
          = f.select :locale, options_for_select(I18n.available_locales.collect{|l| [l, l]}, @tag.locale)
        .col.span_1_of_2
          %fieldset
          = f.label :predefined_class, 'Predefined Tag'
          = f.select :predefined_class, options_for_select(predefined_tags.keys.collect{|k| [k, k]}.prepend(["- None -", nil]), @tag.predefined_class)
          %fieldset
            = f.label :menu
            = f.check_box :menu
            %br/
            = f.label :icon_in_menu
            = f.check_box :icon_in_menu
            %br/
            = f.label :icon_delete, 'Delete icon'
            = f.check_box :icon_delete
            %br/
            = f.label :icon_resize, 'Resize icon'
            = f.check_box :icon_resize
      %fieldset#target_options
        = f.label :target_tag_id, 'Target tag (optional)'
        %br
        = f.select :target_tag_id, options_for_select(SemiStatic::Tag.all.collect{|t| [t.name, t.id]}.prepend(['- None -', nil]), @tag.target_tag_id)
        %br/
        = f.label :target_name, 'Target name (optional)'
        %br/
        = f.text_field :target_name
      %fieldset
        .section.group
          .col.span_1_of_2
            - if @tag.position == 0
              = f.label :position, 'Position 0: Icon sprite file must be 100px x 500px png with 5 icons'
            - else
              = f.label :position, 'Position: Set to 0 to enable the sprites option'
            = f.text_field :position
            %br/
            = f.label :max_entries_on_index_page
            = f.text_field :max_entries_on_index_page
          .col.span_1_of_2
            = f.label :colour, 'CSS colors: black, yellow, #5f78c0, etc'
            = f.text_field :colour
    
    .col.span_1_of_3
      .sidebar
        %h2 Side bar
        %fieldset
          = f.label :side_bar, 'Enable side bar'
          = f.check_box :side_bar
          %fieldset#side_bar_options
            = f.label :sidebar_id, 'Sidebar'
            %br/
            = f.select :sidebar_id, options_for_select(SemiStatic::Sidebar.all.collect{|s| [s.title.blank? ? "##{s.id.to_s}" : s.title, s.id]}.prepend(["- None -", nil]), @tag.sidebar_id)
            %br/
            = f.label :side_bar_news, 'News'
            = f.check_box :side_bar_news
            = f.label :side_bar_social, 'Social links'
            = f.check_box :side_bar_social
            = f.label :side_bar_search, 'Search'
            = f.check_box :side_bar_search
            %br/
            = f.label :side_bar_tag_id, 'Tag for sidebar'
            = f.select :side_bar_tag_id, options_for_select(SemiStatic::Tag.locale(@tag.locale).collect{|t| [t.name, t.id]}.prepend(["- None -", nil]), @tag.side_bar_tag_id)
        - unless @tag.new_record?
          .button{:style => 'margin:3px'}
            = link_to 'New attribute', new_tag_page_attr_path(@tag), :remote => true
        %h2 Attributes
        - if @tag.page_attrs.present?
          %table
            %thead
              %tr
                %th='Key'
                %th='Value'
                %th
            %tbody
              - @tag.page_attrs.each do |a|
                %tr
                  %td= link_to a.attr_key, edit_polymorphic_path([@tag, a]), :remote => :true
                  %td= a.attr_value
                  %td= link_to image_tag("/assets/bin.png"), entry_page_attr_path(@tag, a), :method => :delete
        %h2 Advanced Settings
        %fieldset
          .infobox.wide#context_url_info
            %h3 Generate context URL's
            %p
              Normally entries inside a tag have a url of this form
            %pre
              http://mydomain.com/entries/56-discounts-for-volume-users
            %p
              But if context_urls are set for the tag them the tag name will be used in the URL. So that if the tag is called 'pricing', then the URL will now have this form:
            %pre
              http://mydomain.com/pricing/56-discounts-for-volume-users
            %p
              IMPORTANT #1: Context urls are only generated after the website application restart.
            %p
              IMPORTANT #2: If you use context URL's, then you need to make sure that the URLS do not clash, eg. if your tag is called 'Site' and you enable context urls then the generated URL 'http://mydomain.com/site/56-discounts-for-volume-users' my clash with the main application
          
          %span.infomarker
          = f.label :context_url
          = f.check_box :context_url
        %fieldset
          .section.group
            .col.span_1_of_1
              = f.label :layout_select, 'Rails level layout for this page'
              = f.select :layout_select, options_for_select(General::LAYOUTS.invert.collect{|k, v| [k, v]}, @tag.layout_select)
        
  .mid
    .actions
      = f.submit 'Save'
